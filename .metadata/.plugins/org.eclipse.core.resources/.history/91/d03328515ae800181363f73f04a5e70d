'''
Created on Nov 14, 2018

@author: trish
'''
import re

# PARSE_BLAST2 AS EXAMPLE

blast_file = open('/scratch/RNASeq/blastp.outfmt6')
diff_expr_file = open('/scratch/RNASeq/diffExpr.P1e-3_C2.matrix')
output_file = open("mod11_report.txt", "w")

# Function to parse a single line of BLAST output and return transcript ID and SwissProt ID
def analyze_blast_line(line):
    m1 = re.search(r"(c\d{1,4}_\w{1}\d{1}_\w{1}\d{1})", line)
    if m1:
        transcript = m1.group(1)
    m2 = re.search(r"sp\|(.*)[.]\d{1}\|", line)
    if m2:
        swissprot = m2.group(1)
    return transcript, swissprot

# Initialize dictionary:
blast_dictionary = {}

# Fill dictionary:
for line in blast_file:
    (transcript, swissprot) = analyze_blast_line(line)
    blast_dictionary[transcript] = swissprot

# Reads in BLAST file and parses it for transcript ID and swissprot ID --> DONE
# Uses map() to iterate over the lines of the DE file and produce list of tuples
# Each element in the list will correspond to a line in the file
# Each element in the tuple will correspond to a field within that line of DE data
# The first element in the tuple should be the protein ID, if not found, first element will be transcript

# Prints tuples to an output file, should match Module09 output

# HAS ONLY ONE FOR LOOP: builds dictionary of BLAST items

# Parse one line of DE data and make it a tuple:
def parse_DE(DE_line):
    DE_fields = DE_line.rstrip("\n").split("\t")
    # Convert list to tuple to ensure that state never changes, then return
    return(tuple(DE_fields))

# Convert one tuple to tab-separated string
def tuple_to_tab_sep(one_tuple):
    return "\t".join(one_tuple)

#matrix = open("/scratch/RNASeq/diffExpr.P1e-3_C2.matrix")
list_of_DE_tuples = map(parse_DE, diff_expr_file.readlines())

list_of_tabbed_lines = map(tuple_to_tab_sep, list_of_DE_tuples)
print("\n".join(list_of_tabbed_lines))

blast_file.close()
diff_expr_file.close()